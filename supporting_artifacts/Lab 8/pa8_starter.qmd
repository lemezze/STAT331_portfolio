---
title: "Practice Activity 8: The 12 Days of Christmas"
author: "Leticia Mezzetti"
format: 
  html:
    self-contained: true
    code-tools: true
    code-fold: true
    theme: 
      light: minty
      dark: minty
execute: 
  echo: true
  messages: false
  warning: false
---

```{r packages}
#| include: false
library(dplyr)
library(glue)
library(stringr)
library(purrr)
library(english)
```

### A Test Dataset

Run the code below to load up a dataset called `xmas` that contains the crucial information about the gifts in the song. We will use this dataset to test out our functions as we work on them.

```{r}
xmas <- read.csv("https://www.dropbox.com/s/e584pryn8evm1gz/xmas.csv?dl=1")
```

## Step One: Plurals

Note that the gifts are listed in singular: for example, on day five the narrator receives "five golden rings", but the entry in the dataset for the gift on day five simply says "ring".

Using the skeleton of the `pluralize_gift()` function, complete the code so that the function takes a gift and returns the appropriate plural.

```{r pluralize-function}
# Function that takes a noun and makes it plural
# Arguments -- gift -- A string or vector of strings
# Return -- A string or vector of strings with the pluralized words

pluralize_gift <- function(gift){

gift <-
  if (str_detect(gift, "y$")){
    gift <- str_replace(gift, "y$","ies")
    } else if (str_detect(gift, "oose$")) {
      gift <- str_replace(gift, "oose$", "eese")
      } else {
        gift <- str_replace(gift, "$", "s")
      }

return(gift)

}
```

### Test Your Function

Try your function out on the smaller and then larger gift dataset. Consider: is your function *vectorized*? It does not have to be, but you can try it out if you want!

```{r pluralize-test}
## This will work if your function is vectorized!
#pluralize_gift(xmas$Gift.Item)

## This will work if your function is not vectorized!
purrr::map_chr(xmas$Gift.Item, pluralize_gift)

```

## Step Two: Creating sentences

Write a function called `make_phrase()` that takes as input the necessary information, and returns a phrase. For example,

    make_phrase(num_word = "ten", 
                item = "lords", 
                verb = "a-leaping", 
                adjective = "", 
                location = "")

should return

    "ten lords a-leaping"

```{r phrase-function}
make_phrase <- function(day, num_word, item, verb, adjective, location) {
  
  ## Step 1: Replace NAs with blank strings
  verb <- str_replace_na(verb, "")
  
  ## Step 2: If the day is larger than 1, the items need pluralized! 
  
  ## Step 3: If the day is 1, you need to add an "a" or "an" before the gift 
  
  ## Step 4: Glue all of the pieces together to make a phrase! 

}
```

```{r}
make_phrase <- function(day, num_word, item, verb, adjective, location) {
  
  ## Step 1: Replace NAs with blank strings
  verb <- str_replace_na(verb, "")
  num_word <- str_replace_na(num_word, "")
  adjective <- str_replace_na(adjective, "")
  location <- str_replace_na(location, "")
  ## Step 2: If the day is larger than 1, the items need pluralized! 
  item <- case_when(num_word == 'one' ~ item,
                    TRUE ~ pluralize_gift(item))
  ## Step 3: If the word starts with a vowel, add "an" to the beginning
  num_word <- case_when(num_word == 'one' ~ 'a',
                        TRUE ~ num_word)
  ## Step 4: Glue all of the pieces together! 
  check <- glue::glue("{num_word} {adjective} {item} {verb} {location}")
  check <- str_replace_all(check, "\\s{2,}", " ")
return(check)
}
```

### Test Your Function

Try your function out on the `xmas` data, by making a new variable containing the daily phrases. Notice I've provided you with the starter code to use `pmap_chr()` to iterate through each row of the dataset to create a phrase.

::: callout-tip
Look up the help file for `pmap_chr()` -- what is specified in the `list()`? How does that translate into what your `make_phrase()` function needs as inputs?
:::

```{r}
xmas2 <- xmas %>%
  mutate(
    Full.Phrase = pmap_chr(list(day = Day,
                                num_word = Day.in.Words,
                                item = Gift.Item,
                                verb = Verb,
                                adjective = Adjective,
                                location = Location), 
                           make_phrase)
  )
```

```{r}
xmas2 <- xmas %>%
  mutate(day.num = as.character(english::english(Day)
                                ), 
    Full.Phrase = pmap_chr(
      list(day = Day,
           num_word = day.num,
           item = Gift.Item,
           verb = Verb,
           adjective = Adjective,
           location = Location),
      make_phrase
      )
  )
```

## Submission

Your `Full.Phrase` column is the answer to this week's Practice Activity.

**Copy and paste your `Full.Phrase` column to show me the phrases you made!**
