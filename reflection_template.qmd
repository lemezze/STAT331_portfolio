---
title: "STAT 331 Portfolio"
author: "Leticia Mezzetti"
format: 
  html: 
    self-contained: true
    theme: 
      light: minty
      dark: minty
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be a C+ so far.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from a Lab or Challenge assignment where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

```{r wd-1-csv}
# Lab 2, Question 1
surveys <- read_csv(here("Labs", "Lab 2", "surveys.csv"))
```

-   `xlsx`

```{r wd-1-xlsx}
# Practice Activity 3
military <- read_xlsx(here::here("data", 
                                 "gov_spending_per_capita.xlsx"), 
                      sheet = 9, 
                      skip = 7, 
                      n_max = 190)
```

-   `txt`

```{r wd-1-txt}

```

**WD-2: I can select necessary columns from a dataset.**

```{r wd-2}
# Practice Activity 1, Question 13
top_secret[18:24, 3] <- top_secret[18:24, 3] - 100
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r wd-3-numeric}
# Practice Activity 1, Question 14
top_secret[,4:5] <- top_secret[,4:5] * 2
```

-   character -- specifically a string

```{r wd-3-string}
# Lab 3, Question 6
nrow(distinct(hiphop, word))
```

-   factor

```{r wd-3-factor}
# Lab 5, Question 2
  ggplot(data = surveys,
        mapping = aes(x = weight,
                      y = fct_reorder(species, weight))) +
          geom_jitter(alpha = 0.1,
                      color = "cadetblue") +
            geom_boxplot(outlier.shape = NA) +
  labs(x = "Weight (g)",
       y = "",
       title = "Relationship between Weight (g) and Species of Rodents")
```

-   date

```{r wd-3-date}
# Practice Activity 5, Clue 4
suspects_clean <- suspects_clean %>%
  filter(pm(with_tz(Time.Spotted, tzone = "Iceland")))
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r wd-4-numeric}
# Practice Activity 3, Question 3
military_clean <- military_clean |>
  mutate(across(`1988`:`2019`, as.numeric))
```

-   character -- specifically a string

```{r wd-4-string}
# Lab 3, Question 7
hiphop_clean <- mutate(hiphop_clean, 
                       binEthnic <- case_when(ethnic == "white" ~ "white",
                                              TRUE ~ "non-white"))
```

-   factor

```{r wd-4-factor}
# Lab 5, Question 1
  ggplot(data = surveys,
        mapping = aes(x = weight,
                      y = fct_reorder(species, weight))) +
          geom_jitter(alpha = 0.1,
                      color = "cadetblue") +
            geom_boxplot(outlier.shape = NA) +
  labs(x = "Weight (g)",
       y = "Species of Rodents",
       title = "Relationship between Weight (g) and Species of Rodents")
```

-   date

```{r wd-4-date}
# Practice Activity 5, Clue 3
thanksgiving_2018 <- ymd("2018-11-22")
thx_int <- interval((start = thanksgiving_2018 - days(35)),
                                  (end = thanksgiving_2018 + days(35)))
suspects_clean <- suspects_clean %>%
  filter(Time.Spotted %within% thx_int)
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r wd-5-left}

```

-   `right_join()`

```{r wd-5-right}

```

-   `inner_join()`

```{r wd-5-inner}

```

-   `full_join()`

```{r wd-5-full}

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r wd-6-semi}

```

-   `anti_join()`

```{r wd-6-anti}
# Practice Activity 4, Question 4
military_clean <- military_clean |>
  anti_join(cont_region, by = c("Country" = "Region"))

new_regions <- military_clean |>
  filter(if_all(.cols = `1988`:`2019`, is.na))

regions_not_removed <- new_regions |>
  anti_join(cont_region, by = c("Country" = "Region"))
```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r wd-7-long}
# Practice Activity 4, Question 5
military_clean_long <- military_clean |>
  pivot_longer(cols = `1988`:`2019`,
               names_to = "Year",
               values_to = "Spending"
               ) |>
  select(!c("Reporting year", "Notes"))
```

-   `pivot_wider()`

```{r wd-7-wide}

```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments:

**R-2: I can write well documented and tidy code.**

-   Example 1

```{r r-2-1}
# Lab 2, Question 4
 ggplot(data = surveys,
       mapping = aes(x = weight,
                     y = hindfoot_length)) +
  geom_point() +
  labs(x = "Weight (g)", 
       y = "Hindfoot Length (mm)",
       title = "Relationship between Rodents' Weight (g) and Hindfoot Length (mm)")
```

-   Example 2

```{r r-2-2}
# Lab 3, Question 7
hiphop_clean <- mutate(hiphop_clean, 
                       binEthnic <- case_when(ethnic == "white" ~ "white",
                                              TRUE ~ "non-white"))
```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example 1

```{r r-3-1}

```

-   Example 2

```{r r-3-2}

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   numeric variables

```{r dvs-1-num}
# Lab 2, Question 4
 ggplot(data = surveys,
       mapping = aes(x = weight,
                     y = hindfoot_length)) +
  geom_point() +
  labs(x = "Weight (g)", 
       y = "Hindfoot Length (mm)",
       title = "Relationship between Rodents' Weight (g) and Hindfoot Length (mm)")
```

-   numeric variables and categorical variables

```{r dvs-2-num-cat}

```

-   categorical variables

```{r dvs-2-cat}
# Lab 5, Question 5
surveys |>
  group_by(day_of_week) |>
  drop_na() |>
  ggplot(mapping <- aes(x = day_of_week)) +
  geom_bar(fill = "lightseagreen") +
  labs(title = "Number of Rodents Captured Each Day of the Week",
       x = "Day of Week",
       y = "Count")
```

-   dates

```{r dvs-2-date}
# Lab 5, Question 1
year_summary <- surveys |>
  summarize(year, weight, genus)

ggplot(data = year_summary,
        mapping = aes(x = year,
                      y = weight)) +
  geom_line() +
  facet_wrap(~ genus) +
  labs(title = "Weight Variation in Rodent Genus per Year")
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   Example 1

```{r dvs-2-1}
# Lab 2, Question 14
ggplot(data = surveys,
        mapping = aes(x = species,
                      y = weight)) +
          geom_jitter(alpha = 0.5,
                      color = "cadetblue") +
            geom_boxplot(outlier.shape = NA) +
  labs(x = "Species of Rodents",
       y = "Weight (g)",
       title = "Relationship between Species of Rodents and Weight (g)") +
  guides(x = guide_axis(angle = 90))

# Axis Label Orientation: https://ggplot2.tidyverse.org/reference/guide_axis.html
```

-   Example 2

```{r dvs-2-2}
# Lab 5, Question 4
year_summary <- surveys |>
  group_by(year, genus) |>
  summarize(mean_weight = mean(weight))

ggplot(data = year_summary,
        mapping = aes(x = year,
                      y = mean_weight,
                      color = fct_reorder(genus, mean_weight, .desc = TRUE))) +
  geom_line() +
  labs(title = "Weight Variation in Rodent Genus per Year",
       color = "Genus Type",
       x = "Year",
       y = "")
```

**DVS-3: I show creativity in my visualizations**

-   Example 1

```{r dvs-3-1}
# Lab 2, Question 14
ggplot(data = surveys,
        mapping = aes(x = species,
                      y = weight)) +
          geom_jitter(alpha = 0.5,
                      color = "cadetblue") +
            geom_boxplot(outlier.shape = NA) +
  labs(x = "Species of Rodents",
       y = "Weight (g)",
       title = "Relationship between Species of Rodents and Weight (g)") +
  guides(x = guide_axis(angle = 90))

# Axis Label Orientation: https://ggplot2.tidyverse.org/reference/guide_axis.html
```

-   Example 2

```{r dvs-3-2}
# Challenge 2, Question 2
cdPalette_grey <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", 
                    "#0072B2", "#D55E00", "#CC79A7")


ggplot(data = surveys,
        aes(x = weight, y = species, color = genus)) +
            geom_boxplot() +
  scale_color_manual(values = cdPalette_grey) +
  labs(x = "Weight (g)",
       y = "Species",
       color = "Genus of Organism") +
  annotate("text", y = 1, x = 400, label = "Neotoma") +
  annotate("text", y = 2, x = 200, label = "Chaetodipus") +
  annotate("text", y = 3, x = 300, label = "Peromyscus") +
  annotate("text", y = 4, x = 200, label = "Perognathus") +
  annotate("text", y = 5, x = 350, label = "Reithrodontomys") + 
  annotate("text", y = 6, x = 300, label = "Sigmodon") +
  annotate("text", y = 7, x = 300, label = "Onychomys") +
  annotate("text", y = 8, x = 300, label = "Peromyscus") +
  annotate("text", y = 9, x = 350, label = "Reithrodontomys") +
  annotate("text", y = 10, x = 350, label = "Dipodomys") +
  annotate("text", y = 11, x = 350, label = "Dipodomys") +
  annotate("text", y = 12, x = 350, label = "Chaetodipus") +
  annotate("text", y = 13, x = 350, label = "Dipodomys") +
  annotate("text", y = 14, x = 300, label = "Onychomys") +
  xlim(0, 600) + 
  theme_dark() +
  theme(legend.position = "none")
```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example 1

```{r dvs-4-1}

```

-   Example 2

```{r dvs-4-2}

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r dvs-5-1}
# Lab 5, Question 2
year_summary <- surveys |>
  group_by(year, genus) |>
  summarize(mean_weight = mean(weight, na.rm = TRUE))

ggplot(data = year_summary,
        mapping = aes(x = year,
                      y = mean_weight,
                      color = genus)) +
  geom_line() +
  labs(title = "Weight Variation in Rodent Genus per Year")
```

-   Example 2

```{r dvs-5-2}
# Lab 5, Question 3
year_summary <- surveys |>
  group_by(year, genus) |>
  summarize(mean_weight = mean(weight))

ggplot(data = year_summary,
        mapping = aes(x = year,
                      y = mean_weight,
                      color = fct_reorder(genus, mean_weight, .desc = TRUE))) +
  geom_line() +
  labs(title = "Weight Variation in Rodent Genus per Year")
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

```{r dvs-6-1}

```

-   Example 2

```{r dvs-6-2}

```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r dvs-7-1}

```

-   Example 2

```{r dvs-7-2}

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call

```{r pe-1-one-call}
# Practice Activity 5, Clue 6
date_hint <- ymd_hms("1970-01-01 00:00:00")
suspects_clean <- suspects_clean %>%
  filter(as.integer(difftime(Time.Spotted, date_hint, units = "mins")) %% 10 == 0)
```

-   `across()`

```{r pe-1-across}
# Practice Activity 4, Question 2
military_clean <- military |>
  mutate(across(.cols = Country:`2019`, .fns = ~na_if(., "xxx")),
         across(.cols = Country:`2019`, .fns = ~na_if(., ". .")))
```

-   `map()` functions

```{r pe-1-map-1}

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1

```{r pe2-1}
# Practice Activity 5, Clue 3
thanksgiving_2018 <- ymd("2018-11-22")
thx_int <- interval((start = thanksgiving_2018 - days(35)),
                                  (end = thanksgiving_2018 + days(35)))
suspects_clean <- suspects_clean %>%
  filter(Time.Spotted %within% thx_int)
```

-   Example 2

```{r pe2-2}

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

```{r pe-3-across}

```

-   `map()` functions (Provide 2 Examples)

```{r pe-3-map-1}

```

```{r pe-3-map-2}

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   Example 1

```{r pe-4-1}

```

-   Example 2

```{r pe-4-2}

```

## Data Simulation & Modeling

**DSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r dsm-1-1}

```

-   Example 2

```{r dsm-1-2}

```

**DSM-2: I can fit a linear regression and extract necessary summary measures.**

-   Example 1

```{r dsm-2-1}

```

-   Example 2

```{r dsm-2-2}

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

Looking back at these last few weeks, I would say that I can definitely improve in the "revising my thinking" category of my skills development in this class. I always take the time to read the feedback that I receive on my labs or challenges, but I need to improve on immediately correcting my mistakes. This would be beneficial for me because then I won't have my revisions pile up and I can get constructive feedback in a timely manner.

For example, I have received a couple of incompletes due to the same repeated mistake, which was related to the YAML. This mistake would mean that warnings and other messages would often pop up whenever I would render the Quarto file to be an HTML. I tried various ways of correcting the mistake, but it wasn't until Lab 3 that I realized what my mistake was -- I should have written "messages:" and not "message:" to hide them, while also include "warning: false." Prior to submitting the midterm portfolio, I made sure to revise this mistake.

For the midterm portfolio, I didn't submit any revisions because I'm still working on incorporating the feedback I received into the labs.

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

I did a great job in this category of learning because I often leave comments for myself in the code with either citations of sources or explanations of what I'm doing to handle the data. I often do this because I like to go back to previous assignments as references.

A memorable example of how I have extended my thinking would be best represented by Question 14 on Lab 2, when we had to flip the orientation of our box plots so that they can be stacked vertically. I did not really like how the x axis labels ended up looking like, so I decided to research how I could prevent the labels from overlapping and be readable. I was able to find a way to also change their orientation and provided a source for where I learned this information from.

## Peer Support & Collaboration

<!-- Include an image of feedback you gave that you are proud of (either in a peer review or in Discord) -->

I did pretty well with the peer support and collaboration category of my learning process in this class. I make sure that I don't step into other roles because I don't want other people to feel as though they're not capable of doing their job. However, I'm attentive enough to my peers that I'm willing to step in to help support them in any way possible, while they continue to be the ones in charge of their role. I'm also always respectful and patient because I believe we should have a non-toxic class environment for everyone to learn in.

Outside of the classroom, I have engaged in the class Discord where I would try to answer my peers' questions or ask questions myself. I like that we have these channels of communication because I sometimes realize that I have the same questions as other people. It's a great way for us to share resources with one another.

I included a screenshot of some feedback that I gave to another student for one of our first assignments. I like this comment because not only did I give them constructive feedback, but I also shared my thoughts on how they structured their code. I thought it was interesting that we approached things differently and because of that, we visualized our data differently (which isn't wrong!).

![Screenshot of comment on Canvas](supporting_artifacts/images/Peer_Review_Screenshot.png){width="516"}
