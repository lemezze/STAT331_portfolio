---
title: "STAT 331 Portfolio"
author: "Leticia Mezzetti"
format:
  html: 
    self-contained: true
    theme: 
      light: minty
      dark: minty
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be a B.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from a Lab or Challenge assignment where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

```{r wd-1-csv}
# Lab 2, Question 1
surveys <- read_csv(here("Labs", "Lab 2", "surveys.csv"))
```

-   `xlsx`

```{r wd-1-xlsx}
# Practice Activity 4, Question 1
military <- read_xlsx(here::here("data", 
                                 "gov_spending_per_capita.xlsx"), 
                      sheet = 9, 
                      skip = 7, 
                      n_max = 190)
```

-   `txt`

```{r wd-1-txt}
# Preview Activity 2.2
read_delim("ages_mystery.txt", delim = "|")
```

**WD-2: I can select necessary columns from a dataset.**

```{r wd-2}
# REVISED: Lab 3, Question 9
subjects <- hiphop |>
  distinct(subj, .keep_all = TRUE) |>
  select(age, sex, ethnic)
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r wd-3-numeric}

```

-   character -- specifically a string

```{r wd-3-string}
# Lab 8, Step 1

pluralize_gift <- function(gift){

gift <-
  if (str_detect(string = gift, pattern = "y$")){
    gift <- str_replace(string = gift, pattern = "y$","ies")
    } else if (str_detect(string = gift, pattern = "oose$")) {
      gift <- str_replace(string = gift, pattern = "oose$", "eese")
      } else {
        gift <- str_replace(string = gift, pattern = "$", "s")
      }

return(gift)

}
```

-   factor

```{r wd-3-factor}

```

-   date

```{r wd-3-date}
# Practice Activity 5, Clue 4
suspects_clean <- suspects_clean %>%
  filter(pm(with_tz(Time.Spotted, tzone = "Iceland")))
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r wd-4-numeric}
# Practice Activity 4, Question 3
military_clean <- military_clean |>
  mutate(across(`1988`:`2019`, as.numeric))
```

-   character -- specifically a string

```{r wd-4-string}
# Lab 3, Question 7
hiphop_clean <- mutate(hiphop_clean, 
                       binEthnic <- case_when(ethnic == "white" ~ "white",
                                              TRUE ~ "non-white"))
```

-   factor

```{r wd-4-factor}
# Lab 5, Question 1
  ggplot(data = surveys,
        mapping = aes(x = weight,
                      y = fct_reorder(species, weight))) +
          geom_jitter(alpha = 0.1,
                      color = "cadetblue") +
            geom_boxplot(outlier.shape = NA) +
  labs(x = "Weight (g)",
       y = "Species of Rodents",
       title = "Relationship between Weight (g) and Species of Rodents")
```

-   date

```{r wd-4-date}
# Practice Activity 5, Question 1
suspects <- suspects %>%
  mutate(Time.Spotted = ymd_hms(Time.Spotted),
         Time.Spotted = force_tz(Time.Spotted,
                                 tzone = "America/Los_Angeles")
         )
suspects <- suspects %>%
  filter(pm(Time.Spotted) == TRUE)
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r wd-5-left}

```

-   `right_join()`

```{r wd-5-right}

```

-   `inner_join()`

```{r wd-5-inner}
# REVISED Preview Activity 4.3, Question 3
inner_join(prof_info, prof_course)
```

-   `full_join()`

```{r wd-5-full}
# Preview Activity 4.3, Question 3
prof_course |>
  pivot_longer(cols = c(Stat_331,
                        Stat_330,
                        Stat_431
                        ),
               names_to="course",
               values_to = "can_teach")|>
  full_join(course_info)

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r wd-6-semi}

```

-   `anti_join()`

```{r wd-6-anti}
# Practice Activity 4, Question 4
military_clean <- military_clean |>
  anti_join(cont_region, by = c("Country" = "Region"))

new_regions <- military_clean |>
  filter(if_all(.cols = `1988`:`2019`, is.na))

regions_not_removed <- new_regions |>
  anti_join(cont_region, by = c("Country" = "Region"))
```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r wd-7-long}
# Practice Activity 4, Question 5
military_clean_long <- military_clean |>
  pivot_longer(cols = `1988`:`2019`,
               names_to = "Year",
               values_to = "Spending"
               ) |>
  select(!c("Reporting year", "Notes"))
```

-   `pivot_wider()`

```{r wd-7-wide}
# Lab 9, Question 1
allison_table <- a_names |>
  rename(Sex = Gender) |>
  filter(Name == "Allison")|>
  group_by(State, Sex, Year) |>
  summarize(Count = sum(Count),
            .groups = "keep") |>
  pivot_wider(names_from = Sex,
              values_from = Count,
              values_fill = 0)
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments:

-   Lab 2, Lab 3, Lab 5, Lab 8

**R-2: I can write well documented and tidy code.**

-   Example 1

```{r r-2-1}
# Lab 2, Question 4
 ggplot(data = surveys,
       mapping = aes(x = weight,
                     y = hindfoot_length)) +
  geom_point() +
  labs(x = "Weight (g)", 
       y = "Hindfoot Length (mm)",
       title = "Relationship between Rodents' Weight (g) and Hindfoot Length (mm)")
```

-   Example 2

```{r r-2-2}
# REVISED Lab 3, Question 7
hiphop_clean <- mutate(hiphop_clean, 
                       binEthnic = case_when(ethnic == "white" ~ "white",
                                              TRUE ~ "non-white"))
```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example 1

```{r r-3-1}
# Practice Activity 7, Step 1
divide_and_round <- function(nums){
  
  my_min <- min(nums, na.rm = TRUE)
  divided <- nums/my_min
  rounded <- round(divided)
  return(rounded)
}

```

-   Example 2

```{r r-3-2}
# Preview Activity 9-2, Part 3
music_man <- function(n_tromb, n_cor, n_reed){
  
  trombones <- rnorm(n_tromb, mean = 4.6, sd = 0.8)
  cornets <- runif(n_cor, min = 1.5, max = 3.5)
  reeds <- rchisq(n_reed, df = 4)
  
  total = sum(trombones) + sum(cornets) + sum(reeds)
  
  return(total)
}
```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   numeric variables

```{r dvs-1-num}
# Lab 2, Question 4
 ggplot(data = surveys,
       mapping = aes(x = weight,
                     y = hindfoot_length)) +
  geom_point() +
  labs(x = "Weight (g)", 
       y = "Hindfoot Length (mm)",
       title = "Relationship between Rodents' Weight (g) and Hindfoot Length (mm)")
```

-   numeric variables and categorical variables

```{r dvs-2-num-cat}
# Challenge 2, Question 1
ggplot(data = surveys,
        mapping = aes(x = weight,
                      y = species)) +
          geom_jitter(alpha = 0.5,
                      color = "cadetblue") +
            geom_density_ridges() +
  labs(x = "Weight (g)",
       y = "Species")
```

-   categorical variables

```{r dvs-2-cat}
# Lab 5, Question 5
surveys |>
  group_by(day_of_week) |>
  drop_na() |>
  ggplot(mapping <- aes(x = day_of_week)) +
  geom_bar(fill = "lightseagreen") +
  labs(title = "Number of Rodents Captured Each Day of the Week",
       x = "Day of Week",
       y = "Count")
```

-   dates

```{r dvs-2-date}
# Lab 5, Question 1
year_summary <- surveys |>
  summarize(year, weight, genus)

ggplot(data = year_summary,
        mapping = aes(x = year,
                      y = weight)) +
  geom_line() +
  facet_wrap(~ genus) +
  labs(title = "Weight Variation in Rodent Genus per Year")
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   Example 1

```{r dvs-2-1}
# Lab 5, Part 2 Question 4
year_summary <- surveys |>
  group_by(year, genus) |>
  summarize(mean_weight = mean(weight, na.rm = TRUE))

ggplot(data = year_summary,
        mapping = aes(x = year,
                      y = mean_weight,
                      color = fct_reorder(genus, mean_weight, .desc = TRUE))) +
  geom_line() +
  labs(title = "The Average Weights (g) of Different Rodent Genus over the Years",
       color = "Rodent Genus Type",
       x = "Year",
       y = NULL)

# Resource used to changing legend title: https://stackoverflow.com/questions/52985946/change-legend-title-ggplot2
```

-   Example 2

```{r dvs-2-2}
# Lab 5, Part 3 Question 2
day_order <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")

surveys |>
  filter(!is.na(day_of_week)) |>
  ggplot(mapping <- aes(x = fct_relevel(day_of_week,
                                     day_order))) +
  geom_bar(stat = "count", fill = "lightseagreen") +
  labs(title = "Number of Rodents Captured Each Day of the Week",
       x = "Day of Week",
       y = NULL)
```

**DVS-3: I show creativity in my visualizations**

-   Example 1

```{r dvs-3-1}
# Lab 2, Question 13
ggplot(data = surveys,
        mapping = aes(x = weight,
                      y = species)) +
          geom_jitter(alpha = 0.5,
                      color = "cadetblue") +
            geom_boxplot(outlier.shape = NA) +
  labs(x = "Weight (g)",
       y = "Species of Rodents",
       title = "Relationship between Weight (g) and Species of Rodents ")
```

-   Example 2

```{r dvs-3-2}
# REVISED Challenge 2, Question 2
cdPalette_grey <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", 
                    "#0072B2", "#D55E00", "#CC79A7")

ggplot(data = surveys,
        aes(x = weight, y = species, color = genus)) +
            geom_boxplot() +
  scale_color_manual(values = cdPalette_grey) +
  labs(x = "Weight (g)",
       y = "Species",
       color = "Genus of Organism") +
  theme_dark() +
  theme(legend.position = "none")
```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example 1

```{r dvs-4-1}
# Lab 5, Part 2 Question 4
year_summary <- surveys |>
  group_by(year, genus) |>
  summarize(mean_weight = mean(weight, na.rm = TRUE))

ggplot(data = year_summary,
        mapping = aes(x = year,
                      y = mean_weight,
                      color = fct_reorder(genus, mean_weight, .desc = TRUE))) +
  geom_line() +
  labs(title = "The Average Weights (g) of Different Rodent Genus over the Years",
       color = "Rodent Genus Type",
       x = "Year",
       y = NULL)
```

-   Example 2

```{r dvs-4-2}
# Lab 9, Question 1
allison_table <- a_names |>
  rename(Sex = Gender) |>
  filter(Name == "Allison")|>
  group_by(State, Sex, Year) |>
  summarize(Count = sum(Count),
            .groups = "keep") |>
  pivot_wider(names_from = Sex,
              values_from = Count,
              values_fill = 0)
```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r dvs-5-1}
# Lab 5, Question 3
year_summary <- surveys |>
  group_by(year, genus) |>
  summarize(mean_weight = mean(weight))

ggplot(data = year_summary,
        mapping = aes(x = year,
                      y = mean_weight,
                      color = fct_reorder(genus, mean_weight, .desc = TRUE))) +
  geom_line() +
  labs(title = "Weight Variation in Rodent Genus per Year")

```

-   Example 2

```{r dvs-5-2}

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

```{r dvs-6-1}
# Lab 9, Question 2
allison_f <- a_names |>
  rename(Sex = Gender) |>
  filter(Name == "Allison",
         Sex == "F")|>
  group_by(State, Sex, Year) |>
  summarize(Count = sum(Count),
            .groups = "keep") |>
  pivot_wider(names_from = Sex,
              values_from = Count,
              values_fill = 0)
```

-   Example 2

```{r dvs-6-2}

```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r dvs-7-1}

```

-   Example 2

```{r dvs-7-2}

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call

```{r pe-1-one-call}
# Lab 8, Step 3
sing_day <- function(dataset, num, phrase_col){

  num_word <- english::ordinal(num)

  intro <- glue::glue("On the {num_word} day of Christmas, my true love gave to me")
    phrases <- dataset |>
      pull( {{phrase_col}} )

    gifts <- phrases[num:1]
    combined <- glue::glue_collapse(gifts,
                                    sep = ",\n",
                                    last = ", and \n")
   return (glue::glue("{intro} \n {combined} \n\n"))
}
```

-   `across()`

```{r pe-1-across}
# Practice Activity 4, Question 2
military_clean <- military |>
  mutate(across(.cols = Country:`2019`, .fns = ~na_if(., "xxx")),
         across(.cols = Country:`2019`, .fns = ~na_if(., ". .")))
```

-   `map()` functions

```{r pe-1-map-1}
# Lab 8, Step 3

sing_day(xmas2, num = 2, phrase_col = Full.Phrase)
map_chr(1:12, ~sing_day(xmas2, .x, Full.Phrase)) |>
  str_c(collapse = "\n") |>
  cat()
```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1

```{r pe2-1}
# Lab 8, Part 2 Testing
sing_day <- function(dataset, num, phrase_col){
  
  # Step 1: Setup the intro line
  # Hint: You need to convert a number (e.g., 1) to a word (e.g., first)
  num_word <- english::ordinal(num)
  
  intro <- glue::glue("On the {num_word} day of Christmas, my true love gave to me")
  
  # Step 2: Sing the gift phrases

    phrases <- dataset |>
      pull( {{phrase_col}} )

    gifts <- phrases[num:1]
    combined <- glue::glue_collapse(gifts,
                                    sep = ",\n",
                                    last = ", and \n")
    
  ## put it together
    
   return (glue::glue("{intro} \n {combined} \n\n"))
}
```

-   Example 2

```{r pe2-2}
#Practice Activity 7, Part 2
no_nines_or_twelves <- function(nums){
  check <- !(nums %% 9 == 0 | nums %% 12 == 0)
  return(check)
}
```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

```{r pe-3-across}
# Practice Activity 4, Question 3
military_clean <- military_clean |>
  mutate(across(`1988`:`2019`, as.numeric))
```

-   `map()` functions (Provide 2 Examples)

```{r pe-3-map-1}
# Preview Activity 8, Question 3
penguins |>
  select(bill_length_mm:body_mass_g) |>
  map_df(standardize)
```

```{r pe-3-map-2}
# Preview Activity 8, Question 2
penguins %>%
  mutate(
    body_mass_g = map_dbl(body_mass_g, standardize))
```

**PE-4: I can use modern tools when carrying out my analysis.**

-   Example 1

```{r pe-4-1}
# Lab 9, Question 1
allison_table <- a_names |>
  rename(Sex = Gender) |>
  filter(Name == "Allison")|>
  group_by(State, Sex, Year) |>
  summarize(Count = sum(Count),
            .groups = "keep") |>
  pivot_wider(names_from = Sex,
              values_from = Count,
              values_fill = 0)
```

-   Example 2

```{r pe-4-2}
# Lab 8, Part 2 Testing
sing_day <- function(dataset, num, phrase_col){
  
  # Step 1: Setup the intro line
  # Hint: You need to convert a number (e.g., 1) to a word (e.g., first)
  num_word <- english::ordinal(num)
  
  intro <- glue::glue("On the {num_word} day of Christmas, my true love gave to me")
  
  # Step 2: Sing the gift phrases

    phrases <- dataset |>
      pull( {{phrase_col}} )

    gifts <- phrases[num:1]
    combined <- glue::glue_collapse(gifts,
                                    sep = ",\n",
                                    last = ", and \n")
    
  ## put it together
    
   return (glue::glue("{intro} \n {combined} \n\n"))
}
```

## Data Simulation & Modeling

**DSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r dsm-1-1}
# Preview Activity 9-2, Part 3
set.seed(1957)

music_man <- function(n_tromb, n_cor, n_reed){
  
  trombones <- rnorm(n_tromb, mean = 4.6, sd = 0.8)
  cornets <- runif(n_cor, min = 1.5, max = 3.5)
  reeds <- rchisq(n_reed, df = 4)
  
  return(sum(trombones) + sum(cornets) + sum(reeds))
  
}

my_weights <- map_dbl(.x = 1:1000, 
                      .f = ~ music_man(n_tromb = 76,
                                       n_cor = 110,
                                       n_reed = 1035))

sum(my_weights < 4532)
```

-   Example 2

```{r dsm-1-2}
# Preview Activity 9-2, Part 2
qunif(p = 0.95, min = 1.5, max = 3.5)
qnorm(p = .10, mean = 4.6, sd = 0.8)
pnorm(q = 5, mean = 4.6, sd = 0.8, lower.tail = FALSE)
pchisq(q = 5, df = 4, lower.tail = FALSE)

random_weights <- rnorm(n = 100, mean = 4.6, sd = 0.8)
sum(random_weights < 4)
```

**DSM-2: I can fit a linear regression and extract necessary summary measures.**

-   Example 1

```{r dsm-2-1}
# Lab 9, Question 4
allison_over_years |> 
  lm(Count ~ Year, data = _)
```

-   Example 2

```{r dsm-2-2}
# Practice Activity 9, Question 2
mystery_lm <- mystery_animal |>
  lm(weight_after ~ weight_before, data = _)
```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

Even though there were some times that I could have continued to "revise my thinking" in some of the assignments, I was able to successfully implement a version of this throughout the quarter. I would often take the time to read the feedback that I receive on my labs or challenges and would also reflect on what I could have improved on when I gave feedback to my peers. I would also take this feedback and attempt to revise these assignments to figure out how to improve my understanding of the material. This iterative process helped me solidify my skills in problem-solving because I was able to eventually recognize patterns in the approaches we could use in some of the problems in assignments. I also continued to demonstrate revision in my thinking because I changed some of the entries in my portfolio and even revised some of my code samples.

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

I did a great job in this category of learning because I often left comments for myself in the code with either citations of sources or explanations of what I'm doing to handle the data. I often did this because I like to go back to previous assignments as references.

A memorable example of how I have extended my thinking would be best represented by Question 14 on Lab 2, when we had to flip the orientation of our box plots so that they can be stacked vertically. I did not really like how the x axis labels ended up looking like, so I decided to research how I could prevent the labels from overlapping and be readable. I was able to find a way to also change their orientation and provided a source for where I learned this information from. Even though I learned how to do this skill, it wasn't until later that we learned that we shouldn't make readers tilt their heads when looking at graphs because it is best practice to make our data visualizations straight-forward and readable. This meant that the best approach for that lab was to have kept our box plots horizontal.

## Peer Support & Collaboration

<!-- Include an image of feedback you gave that you are proud of (either in a peer review or in Discord) -->

I did pretty well with the peer support and collaboration category of my learning process in this class. I made sure that I didn't step into other roles because I didn't want my teammates to feel as though they're not capable of doing their job. However, this means that I was still attentive enough to my peers, where I was willing to step in to help support them in any way possible while they continue to be in charge of their role. I've also been respectful and patient because I believe we should have a non-toxic class environment for everyone to learn in.

Outside of the classroom, I engaged in the class Discord where I would try to answer my peers' questions or ask questions myself. I liked that we have these channels of communication because I sometimes realized that I had the same questions as other people. It was a great way for us to share resources with one another.

I included a screenshot of some feedback that I gave to another student for one of our first assignments. I liked this comment because not only did I give them constructive feedback, but I also shared my thoughts on how they structured their code. I thought it was interesting that we approached things differently and because of that, we visualized our data differently (which isn't wrong!).

![Screenshot of comment on Canvas](supporting_artifacts/images/Peer_Review_Screenshot.png){width="516"}
